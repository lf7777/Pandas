一. 基 本 操 作 :


    import pandas as pd

    help(pd) 无帮助的文档


    作 用 :

        <1> 数 据 处 理 及 数 据 分 析 

    需 要 掌 握 的 内 容 :

        <1> pandas 对象的生成

        <2> 查看数据

        <3> 选择数据

        <4> 更新数据

        <5> 分组聚合

        <6> 从 excel 和 mysql 和 csv 获取数据

        <7> 两个 dataframe 的合并

        <8> 统计学相关的函数操作

        <9> apply applymap 函数的使用


重 点 理 解 :

    <1> axis  

        0 行

        1 列

        有些函数 的axis默认值不相同,axis能取反,根据人性进行判断.



二. 创 建 pandas 对 象 :


    <1> res = pd.Series([1,3,4])

        创建 Series


    <2> res = pd.DataFrame([1,2,3],[2,3,4])

        创建 DataFrame


    <2> pd.date_range(20200125,periods=10)

        创建跨度时间 (一般用于index)

        参 数 :

            periods = 10 往后10天

            return DatetimeIndex(['2020-01-25','2020-01-26',...])


    <3> pd.MultiIndex.from_tuples(tuples,names=['first','second'])

        创建多列索引


    <4> pd.pivot_table(object,index=['A','B'],columns=['C'])

        创建数据透视表
    


三. index column values : 


    <1> .index

        获取 index

        语 法 : object.index

        (1) 获取全部 object.index

        (2) 获取个别 object.index[]

        (3) 获取区间 object.index[2:4]


    <2> .columns

        获取 columns

        (1) 获取全部 object.columns

        (2) 获取个别 object.columns[]

        (3) 获取区间 object.columns[2:4]


    <3> .values

        获取 values

        语 法 : object.values

        (1) 获取全部 : object.values

        (2) 获取行     : object.values[]

        (3) 获取行区间 : object.values[2:4]

        (4) 获取具体数据 : object.values[0][1]


    <4> .reindex()

        更新 index (或增删)
        
        开辟一个新的空间,不会修改原视图

        而 .index=[] 会修改原视图


    <5> .reshape(4,5)

        设定 图形

        参数1 为行,参数2 为列

        通 常 : np.arange(20).reshape(4,5) 4行5列.

        注 意 : 4 * 5 must = 20


    <6> .stack()

        DataFrame.stack()

        将 column 给到 每一行数据, 返回 Series


    <7> .unstack()

        将 上面的 结果 转回为 正常图形


    <8> .T

        行 列 反 转 (行到列的位置,列到行的位置)


    <8> .name

        <1> df.index.name = 

            为 index 取名

        <2> df.columns.name =

            为 column 取名


    <9> 多 列 :

        object[[0,1,2]]


    <10> df[1]

        第 1 列


    <11> df[1:3]

        但切片查 则是 : 1行 和 2行



四. 属 性 :


    <1> .shape

        获取视图 有多少行 和 多少列

        获取行数 和 列数


    <2> .dtypes

        获取 列的数据类型



五. 查 看 数 量 相 关 方 法 :


    <1> .head() 
        
        查看 前几

        类似 limit 默认查看前 5条
    

    <2> .tail()

        查看 后几

        类似 limit 默认查看后 5条


    <3> len(object)

        return 行数


    <4> .value_counts()

        查询 Series 中每个数据的个数


六. 排 序 :


    <1> .sort_index

        通过 index 排序   

        如变降序列 : .sort_index(ascending=False)


    <2> .sort_values

        通过 column 排序

        如变降序 或 指定 column : .sort_values(by=,ascending=False)



五. 其 他 方 法 :


    <1> obj.shift()

        object.shift(1)

        数据整体 挪动 可为 - 

        所有行 向下挪 指定参数次

        Series 和 DataFrame 均可用


    <2> new = obj.copy()

        对b进行修改,会修改 b 视图的内容.或新搞出来的对象,随处都可修改新对象.

        (用pd.DataFrame创建的列表,永远不会被修改)

    
    <3> obj.str.lower() obj.str.upper()

        转变 大小写


    <4> -object 

        如果里面是 数字类型 , 则返回一个新的 -的视图

        正值变负值方法 :

            object[object>0] = - object

        负值变正值方法 :

            object[object<0] = - object


