读 取 文 件 获 得 对 象 :


一. 写 入 CSV 格 式 :

        参 数 : 
            1. 默认带 修改过的 columns 和 indexs
            2. index/header=False则不带(就是纯数据)
            3. columns=['name','sex']指定写的哪列

        df.to_csv('PATH',index=False,header=False,

        colums=['name','c','a'],encoding='utf-8')


二. 读 CSV 格 式 :

    df = pd.read_csv('PATH')

    csv文件 是数据之间以 ',' 分隔

    pd.read_csv('z.csv',header=None,index_col=0,nrows=3,
                 usecols=[0],skiprows=2)

        默 认 : 
            1. 不带 

        参 数 :
            1. 文件路径
            2. sep='' 指定分隔符 (暂不知作用)
            3. header=0 指定column,默认是0,将第一行设为column.
               或将指定行设为表头,=None将不设column,用0,1,2系统默认替代
            4. names=['a','b'] 不使用csv中的column,自定义column
            5. index_col 指定哪列作为index,index_col=0:指定文件中第一列
            6. nrows=3 读取前几行
            7. skiprows=2 跳过几行
            8. usecols=[1,2] 读取哪列 (暂没成功,必为列表) 
            9. skipfooter=2 从表格末尾算起忽略的行,必须配合engin='python'
               否则会报警告
           10. engine='c' c更快,python更完善
           11. na_values=[] 将csv文件中的某些字符替换为空值

        时间相关参数 :
            1. 文件路径
            2. parse_dates=[['date','time']]将两列合并为时间格式,默认列名合并_
            3. parse_dates={'s':['date','time']} 将两列合并解析为时间,自定义列名
            4. keep_date_col=True 保留合并前的列



三. 写 Excel 格式 (xlsx) :


    import openpyxl

    import xlrd

    df.to_excel('PATH',header=False,index=False) 默认存索引和列名,False表示不存

    df.to_excel('PATH','Sheet1') 自定义工作表表名,默认Sheet1

    df.to_excel('PATH',sheet_name='Sheet1') 和第二条结果相同
    
    
    多个 变量写入一个文件 :

    创建文件对象 : writer = pd.ExcelWriter('output.xlsx')

    写入第一个图 : df.to_excel(writer,'Sheet1')

    写入第二个图 : d2.to_excel(writer,'Sheet2')

    保存文件 : writer.save()



四. 读 Excel (xlsx) :


    参数和 csv 的大致相同 (参数sheetname='')

    <1> pd.read_excel('output.xlsx','Sheet1')

    <2> 从多个sheet中读取一个:

        pd.read_excel('output.xlsx',None)['Sheet1']



五. 读 MySql :


    import pymysql

    import pandas pd

    准 则 : 
        
        获取到 DataFrame column=field 和 pandas系统分配 index

    格 式 :

    db = pymysql.connect(地址,用户,密码,db='数据库名',charset='utf8mb4')

    sql = 'select ....'

    df = pd.read_sql(sql语句,con=db指定数据库连接对象)

    db.close()

    示 例: 

    import pymysql

    import pandas as pd

    db = pymysql.connect('localhost','root','',db='my_mysql',charset='utf8mb4')

    sql = 'select * from bb'

    df = pd.read_sql(sql,con=db)

    print(df)

    db.close()
